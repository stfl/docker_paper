
@inproceedings{solteszContainerBasedOperatingSystem2007,
  title = {Container-{{Based Operating System Virtualization}}: {{A Scalable}}, {{High}}-{{Performance Alternative}} to {{Hypervisors}}},
  volume = {41},
  shorttitle = {Container-Based Operating System Virtualization},
  booktitle = {{{ACM SIGOPS Operating Systems Review}} ({{OSR}})},
  publisher = {{ACM}},
  author = {Soltesz, Stephen and P\"otzl, Herbert and Fiuczynski, Marc E. and Bavier, Andy and Peterson, Larry},
  year = {2007},
  pages = {275--287},
  file = {/home/sll/Zotero/storage/5YLJ5V2M/Soltesz et al. - 2007 - Container-based operating system virtualization a.pdf;/home/sll/Zotero/storage/DQXNES55/citation.html}
}

@inproceedings{morabitoHypervisorsVsLightweight2015,
  title = {Hypervisors vs. {{Lightweight Virtualization}}: {{A Performance Comparison}}},
  shorttitle = {Hypervisors vs. {{Lightweight Virtualization}}},
  doi = {10.1109/IC2E.2015.74},
  abstract = {Virtualization of operating systems provides a common way to run different services in the cloud. Recently, the lightweight virtualization technologies claim to offer superior performance. In this paper, we present a detailed performance comparison of traditional hypervisor based virtualization and new lightweight solutions. In our measurements, we use several benchmarks tools in order to understand the strengths, weaknesses, and anomalies introduced by these different platforms in terms of processing, storage, memory and network. Our results show that containers achieve generally better performance when compared with traditional virtual machines and other recent solutions. Albeit containers offer clearly more dense deployment of virtual machines, the performance difference with other technologies is in many cases relatively small.},
  booktitle = {2015 {{IEEE International Conference}} on {{Cloud Engineering}}},
  author = {Morabito, R. and Kj\"allman, J. and Komu, M.},
  month = mar,
  year = {2015},
  keywords = {Albeit containers,anomalies,Benchmark testing,Benchmarking,benchmarks tools,Container,Containers,Hypervisor,hypervisors,lightweight virtualization technologies,Linux,memory,network,operating systems,Operating systems,operating systems (computers),Performance,processing,storage,strengths,Virtual machine monitors,virtual machines,virtualisation,Virtualization,weaknesses},
  pages = {386-393},
  file = {/home/sll/Zotero/storage/ZSX3SFXQ/Morabito et al. - 2015 - Hypervisors vs. Lightweight Virtualization A Perf.pdf;/home/sll/Zotero/storage/AU5ZFICM/7092949.html}
}

@article{wesselImprovingMobileDevice2015,
  title = {Improving {{Mobile Device Security}} with {{Operating System}}-{{Level Virtualization}}},
  volume = {52},
  issn = {0167-4048},
  doi = {10.1016/j.cose.2015.02.005},
  abstract = {In this paper, we propose a lightweight mechanism to isolate one or more Android userland instances from a trustworthy and secure entity. This entity controls and manages the Android instances and provides an interface for remote administration and management of the device and its software. We provide an administrative solution for dynamically modifying, removing or adding multiple Android instances remotely and locally. Furthermore, we present a secure device provisioning and enrollment solution for our system. Our approach includes several security extensions for secure network access, integrity protection of data on storage devices, and secure access to the touchscreen of mobile devices. Our implementation requires only minimal modification to the software stack of a typical Android-based smartphone, which allows easy porting to other devices when compared to other virtualization techniques. Practical tests show the feasibility of our approach regarding runtime overhead and battery lifetime impact.},
  journal = {Computers \& Security},
  note = {\url{http://www.sciencedirect.com/science/article/pii/S0167404815000206}},
  author = {Wessel, Sascha and Huber, Manuel and Stumpf, Frederic and Eckert, Claudia},
  month = jul,
  year = {2015},
  keywords = {Android,Integrity protection,Mobile device security,Operating system-level virtualization,Smartphones},
  pages = {207-220},
  file = {/home/sll/Zotero/storage/Y4R83C42/Wessel et al. - 2015 - Improving mobile device security with operating sy.pdf;/home/sll/Zotero/storage/5VJNMPB2/S0167404815000206.html}
}

@misc{osnatBriefHistoryContainers,
  title = {A {{Brief History}} of {{Containers}}: {{From}} the 1970s to 2017},
  shorttitle = {A {{Brief History}} of {{Containers}}},
  abstract = {Everything you wanted to know about virtual containers' history: From 1970s chroot and Unix to Docker 2017},
  language = {en-us},
  howpublished = {\url{https://blog.aquasec.com/a-brief-history-of-containers-from-1970s-chroot-to-docker-2016}},
  author = {Osnat, Rani},
  file = {/home/sll/Zotero/storage/SVPSM5WQ/a-brief-history-of-containers-from-1970s-chroot-to-docker-2016.html}
}

@article{santosHowDoesDocker2018,
  title = {How Does Docker Affect Energy Consumption? {{Evaluating}} Workloads in and out of {{Docker}} Containers},
  volume = {146},
  issn = {01641212},
  shorttitle = {How Does Docker Affect Energy Consumption?},
  doi = {10.1016/j.jss.2018.07.077},
  language = {en},
  journal = {Journal of Systems and Software (J. Syst. Softw.)},
  note = {\url{https://linkinghub.elsevier.com/retrieve/pii/S0164121218301456}},
  author = {Santos, Eddie Antonio and McLean, Carson and Solinas, Christopher and Hindle, Abram},
  month = dec,
  year = {2018},
  pages = {14-25},
  file = {/home/sll/Zotero/storage/HYSMBBXB/Santos et al. - 2018 - How does docker affect energy consumption Evaluat.pdf}
}

@misc{wilmottDockerImplemented100,
  title = {Docker {{Implemented}} in {{Around}} 100 {{Lines}} of {{Bash}}.},
  copyright = {GPL-3.0},
  journal = {GitHub},
  howpublished = {\url{https://github.com/p8952/bocker}},
  author = {Wilmott, Peter}
}

@misc{RunCCLITool,
  title = {{{runC}}: {{CLI Tool}} for {{Spawning}} and {{Running Containers According}} to the {{OCI Specification}}.},
  shorttitle = {{{CLI}} Tool for Spawning and Running Containers According to the {{OCI}} Specification},
  journal = {GitHub},
  howpublished = {\url{https://github.com/opencontainers/runc}}
}

@misc{DockerExtractsDonates,
  title = {Docker {{Extracts}} and {{Donates}} Containerd, Its {{Core Container Runtime}}, to {{Accelerate Innovation Across}} the {{Container Ecosystem}}},
  language = {en},
  howpublished = {\url{https://www.docker.com/docker-news-and-press/docker-extracts-and-donates-containerd-its-core-container-runtime-accelerate}},
  file = {/home/sll/Zotero/storage/K8BSZGDR/docker-extracts-and-donates-containerd-its-core-container-runtime-accelerate.html}
}

@misc{DockerIntroducingExecution,
  title = {Docker 0.9: {{Introducing Execution Drivers}} and Libcontainer},
  shorttitle = {Docker 0.9},
  abstract = {Fellow Dockers, Today we are happy to introduce Docker 0.9. With this release we are continuing our focus on quality over features, shrinking and stabilizing the core, and providing first-class support for all major operating systems. In addition to dozen of bug fixes, Docker 0.9 includes 2 major improvements: execution drivers and libcontainer. As usual, for a complete list of improvements, you can check out the Changelog. ~ Execution drivers First, we are introducing an execution driver API which can be used to customize the execution environment surrounding each container. This allows Docker to take advantage of the numerous isolation tools available, each with their particular tradeoffs and install base: OpenVZ, systemd-nspawn, libvirt-lxc, libvirt-sandbox, qemu/kvm, BSD Jails, Solaris Zones, and even good old chroot. This is in addition to LXC, which will continue to be available as a driver of Continue reading...},
  language = {en},
  journal = {Docker Blog},
  howpublished = {\url{https://blog.docker.com/2014/03/docker-0-9-introducing-execution-drivers-and-libcontainer/}},
  file = {/home/sll/Zotero/storage/QMTRDWMU/docker-0-9-introducing-execution-drivers-and-libcontainer.html}
}

@inproceedings{felterUpdatedPerformanceComparison2015,
  title = {An {{Updated Performance Comparison}} of {{Virtual Machines}} and {{Linux Containers}}},
  booktitle = {Performance {{Analysis}} of {{Systems}} and {{Software}} ({{ISPASS}})},
  publisher = {{IEEE}},
  author = {Felter, Wes and Ferreira, Alexandre and Rajamony, Ram and Rubio, Juan},
  year = {2015},
  pages = {171--172},
  file = {/home/sll/Zotero/storage/GYUWR494/Felter et al. - 2015 - An updated performance comparison of virtual machi.pdf;/home/sll/Zotero/storage/2EDLAAW8/7095802.html}
}

@inproceedings{waltersComparisonVirtualizationTechnologies2008,
  title = {A {{Comparison}} of {{Virtualization Technologies}} for {{HPC}}},
  booktitle = {Advanced {{Information Networking}} and {{Applications}} ({{AINA}})},
  publisher = {{IEEE}},
  author = {Walters, John Paul and Chaudhary, Vipin and Cha, Minsuk and Guercio Jr, Salvatore and Gallo, Steve},
  year = {2008},
  pages = {861--868},
  file = {/home/sll/Zotero/storage/TK9AAADE/4482796.html}
}

@misc{Docker11First,
  title = {Docker 1.11: {{The First Runtime Built}} on {{Containerd}} and {{Based}} on {{Oci Technology}}},
  shorttitle = {Docker 1.11},
  abstract = {We are excited to introduce Docker Engine 1.11, our first release built on runC \texttrademark{}~and containerd \texttrademark. With this release, Docker is~the~first to ship a runtime based on~OCI technology,~demonstrating the progress the team has~made since donating our industry-standard container format and runtime under the Linux Foundation in June~of 2015. Over the last year, Docker has helped advance the work of the OCI to make it more readily available to more users. It started in December 2015,~when we introduced containerd \texttrademark, a daemon to control runC. This was part of our effort to break out Docker into small reusable components. With this release, Docker Engine is now built on containerd, so everyone who is using Docker is now using OCI. We're proud of the progress we've made on the OCI with the 40+ members to continue the work to standardize container Continue reading...},
  language = {en},
  journal = {Docker Blog},
  howpublished = {\url{https://blog.docker.com/2016/04/docker-engine-1-11-runc/}},
  file = {/home/sll/Zotero/storage/CREYHZ35/docker-engine-1-11-runc.html}
}

@phdthesis{ederInfrastructureAgnosticApplication2017,
  title = {An {{Infrastructure Agnostic Application Deployment Framework}} for the {{Internet}} of {{Things}}},
  abstract = {ger: In den letzten Jahren wurden Begriffe wie Smart Grid, Smart City, oder Smart Vehicles immer popul\"arer. Sie fallen alle unter das Konzept des Internet der Dinge (IoT). Sch\"atzungen zufolge werden im Jahr 2020 bis zu 34 Milliarden Ger\"ate mit dem Internet verbunden sein. Das gro\ss{}e Potenzial von IoT ist mit vielen Herausforderungen verbunden. Neben Aspekten wie Privatsph\"are, Sicherheit, Skalierbarkeit, etc., ist die Infrastruktur des IoT ein erhebliches Problem. Die gro\ss{}e Anzahl an unterschiedlichen Ger\"aten f\"uhrt zu einem sehr heterogenen Umfeld. Die Entwicklung von Applikationen, welche diese heterogene Infrastruktur ber\"ucksichtigt, wird dadurch \"au\ss{}erst komplex und fehleranf\"allig. Eine m\"ogliche L\"osung f\"ur dieses Problem ist durch Virtualisierung die Plattform zu abstrahieren. Im Zuge dieser Diplomarbeit wird die Verwendung von Betriebssystemvirtualisierung in Verbindung mit dieser heterogenen Umgebung untersucht. In diesem Zusammenhang werden h\"aufig verwendete IoT Ger\"ate vorgestellt. Zudem erfolgt eine detaillierte Beschreibung der Virtualisierung in verschiedenen Betriebssystemen (z.B.: Linux, FreeBSD, Solaris, Windows). Neben der Vorstellung von aktuellen Container Engines mit Fokus auf Linux, wird auch das Konzept der Continuous Delivery erl\"autert. Zur Demonstrierung der Anwendbarkeit der Betriebssystemvirtualisierung im Kontext von IoT, wird ein Application Deployment Framework entwickelt. Dieses Framework bietet die M\"oglichkeit Applikationen mit einem Klick zu verteilen und einzusetzen. Zus\"atzlich erlaubt es das Einsetzen auf verschiedenen CPU-Architekturen (z.B.: ARM, x86) und vereinfacht die Integrierung in eine bereits vorhandene Continuous Delivery Pipeline durch eine REST API. Die Funktionen des Frameworks werden durch den Einsatz eines Geb\"audemanagementsystems veranschaulicht. Im letzten Teil der Diplomarbeit, wird die Verwendung von verschiedenen Applikationen auf unterschiedlichen Ger\"aten hinsichtlich der Realisierbarkeit und Anwendbarkeit des vorgestellten Ansatzes evaluiert und diskutiert.; eng: In the last years terms like Smart Grid, Smart City or Smart Vehicle, became increasingly popular. They all fall under the conception of the so called Internet of Things (IoT). It is estimated that in 2020 will be up to 34 billion devices connected with the Internet. However, the huge potentials of IoT come with various challenges. Among issues like privacy, security, scalability, etc., the infrastructure in IoT is a significant problem. The huge amount of different devices leads to a highly heterogeneous environment. Thus, developing applications that respect these heterogeneous infrastructures is exceedingly complex and in further consequence very error prone. A possible solution to this problem is to abstract the platform through virtualization. In the course of this thesis we investigate how operating-system-level virtualization can be used to cope with the heterogeneous environment. Therefore, commonly used IoT devices are presented and an in-depth explanation of how operating-system-level virtualization is implemented on different operating systems (e.g., Linux, FreeBSD, Solaris, Windows) is given. Furthermore, currently available container engines with focus on Linux are introduced and compared. We also explain the concept of continuous delivery, and why this development approach facilitates agile development. To show the feasibility of operating-system-level virtualization in the context of IoT, a prototype of an application deployment framework is developed. This framework provides distribution and deployment of applications within one click. Furthermore, it allows to deploy on different CPU-architectures (e.g., ARM, x86) transparently to the user. Additionally, it can easily be integrated within a continuous delivery pipeline through a REST API. The features of the framework are demonstrated via the deployment of a Building Managament System (BMS). In the last part of the thesis, the deployment time of different applications on various devices is evaluated and discussed, which shows both, feasibility and applicability of the proposed approach.},
  school = {TU Wien},
  author = {Eder, Peter},
  year = {2017},
  file = {/home/sll/Zotero/storage/ZIZ8ZVFZ/Eder - An infrastructure agnostic application deployment .pdf}
}

@misc{StorageDrivers,
  title = {About {{Storage Drivers}}},
  abstract = {Learn the technologies that support storage drivers.},
  language = {en},
  journal = {Docker Documentation},
  howpublished = {\url{https://docs.docker.com/storage/storagedriver/}},
  file = {/home/sll/Zotero/storage/ZT9579EL/storagedriver.html}
}

@misc{DockerNetworkingDocumentation,
  title = {Docker {{Networking Documentation}}},
  abstract = {Overview of Docker networks and networking concepts},
  language = {en},
  journal = {Docker Documentation},
  howpublished = {\url{https://docs.docker.com/network/}},
  file = {/home/sll/Zotero/storage/4N87XT47/network.html}
}

@misc{CoreOSRkt,
  title = {{{CoreOS}} Rkt},
  abstract = {Try out Rkt on Container Linux with CoreOS. Integration has never been easier; discover the advantages of a security-minded, standards-based container engine.},
  language = {en},
  howpublished = {\url{https://coreos.com/rkt/}},
  file = {/home/sll/Zotero/storage/EEFXXX4U/rkt.html}
}

@misc{CoreOSRktImage,
  title = {{{CoreOS}} Rkt {{Image Signing}} and {{Verification Guide}}},
  abstract = {CoreOS provides Container Linux, Tectonic for Kubernetes and the Quay image registry; key components to secure, simplify and automatically update your container infrastructure.},
  language = {en},
  howpublished = {\url{https://coreos.com/rkt/docs/latest/signing-and-verification-guide.html}},
  file = {/home/sll/Zotero/storage/MNEBDDNZ/signing-and-verification-guide.html}
}

@misc{CoreOSRktApp,
  title = {{{CoreOS}} Rkt {{App Container Basics}}},
  abstract = {CoreOS provides Container Linux, Tectonic for Kubernetes and the Quay image registry; key components to secure, simplify and automatically update your container infrastructure.},
  language = {en},
  howpublished = {\url{https://coreos.com/rkt/docs/latest/app-container.html}},
  file = {/home/sll/Zotero/storage/VYUB2VZ9/app-container.html}
}

@misc{AppContainerSpecification,
  title = {App {{Container Specification}} and {{Tooling}}.},
  journal = {GitHub},
  howpublished = {\url{https://github.com/appc/spec/blob/master/SPEC.md}}
}

@misc{AppContainerSpecification2019README,
  title = {App {{Container Specification}} and {{Tooling}}. {{README}}},
  journal = {GitHub},
  howpublished = {\url{https://github.com/appc/spec/blob/master/README.md}}
}

@misc{WhatKubernetesUsers,
  type = {{{CoreOS Blog}}},
  title = {What {{Kubernetes Users Should Know About}} the Rkt {{Container Engine}}},
  howpublished = {\url{https://coreos.com/blog/rkt-and-kubernetes.html}},
  file = {/home/sll/Zotero/storage/8SPPN7SY/rkt-and-kubernetes.html}
}

@misc{RktnetesBringsRkt,
  title = {Rktnetes {{Brings}} Rkt {{Container Engine}} to {{Kubernetes}}},
  abstract = {Editor's note: this post is part of~a series of in-depth articles on what's new in Kubernetes 1.3~
As part of Kubernetes 1.3, we're happy to report that our work to bring interchangeable container engines to Kubernetes is bearing early fruit. What we affectionately call ``rktnetes'' is included in the version 1.3 Kubernetes release, and is ready for development use. rktnetes integrates support for CoreOS rkt into Kubernetes as the container runtime on cluster nodes, and is now part of the mainline Kubernetes source code.},
  language = {en},
  howpublished = {\url{https://kubernetes.io/blog/2016/07/rktnetes-brings-rkt-container-engine-to-kubernetes/}},
  file = {/home/sll/Zotero/storage/9U3CZX89/rktnetes-brings-rkt-container-engine-to-kubernetes.html}
}

@misc{CoreOSRktArchitecture,
  title = {{{CoreOS}} Rkt {{Architecture Documentation}}},
  abstract = {CoreOS provides Container Linux, Tectonic for Kubernetes and the Quay image registry; key components to secure, simplify and automatically update your container infrastructure.},
  language = {en},
  howpublished = {\url{https://coreos.com/rkt/docs/latest/devel/architecture.html}},
  file = {/home/sll/Zotero/storage/HVTA8625/architecture.html}
}

@misc{CoreOSRktOCI,
  title = {{{CoreOS}} Rkt {{OCI Native Support}} | {{Current Project State}}.},
  shorttitle = {Rkt Is a Pod-Native Container Engine for {{Linux}}. {{It}} Is Composable, Secure, and Built on Standards.},
  journal = {GitHub},
  howpublished = {\url{https://github.com/rkt/rkt/projects/4}}
}

@misc{Systemd,
  title = {Systemd},
  journal = {Freedesktop.org},
  howpublished = {\url{https://freedesktop.org/wiki/Software/systemd/}},
  file = {/home/sll/Zotero/storage/RMPL237Z/systemd.html}
}

@misc{JujucharmsJuju,
  title = {Jujucharms | {{Juju}}},
  howpublished = {\url{https://jujucharms.com/}},
  file = {/home/sll/Zotero/storage/2V22C9E6/jujucharms.com.html}
}

@misc{OpenStack,
  title = {Openstack: {{Build}} the {{Future}} of {{Open Infrastructure}}.},
  howpublished = {\url{https://www.openstack.org/}},
  file = {/home/sll/Zotero/storage/6UIKS8DY/www.openstack.org.html}
}

@misc{Kubernetes,
  title = {Kubernetes: {{Production}}-{{Grade Container Orchestration}}},
  abstract = {Kubernetes (k8s) is an open-source system for automating deployment, scaling, and management of containerized applications. It groups containers that make up an application into logical units for easy management and discovery. Kubernetes builds upon 15 years of experience of running production workloads at Google, combined with best-of-breed ideas and practices from the community.
    Planet Scale Designed on the same principles that allows Google to run billions of containers a week, Kubernetes can scale without increasing your ops team.},
  language = {en},
  howpublished = {\url{https://kubernetes.io/}},
  file = {/home/sll/Zotero/storage/84LEQY87/kubernetes.io.html}
}

@misc{OpenShift,
  title = {{{OpenShift}}: {{Container Application Platform}} by {{Red Hat}}, {{Built}} on {{Docker}} and {{Kubernetes}}},
  shorttitle = {{{OpenShift}}},
  abstract = {OpenShift is an open source container application platform by Red Hat based on top of Docker containers and the Kubernetes container cluster manager for enterprise app development and deployment.},
  language = {en-us},
  howpublished = {\url{https://www.openshift.com}},
  file = {/home/sll/Zotero/storage/MGJ995DP/www.openshift.com.html}
}

@misc{CloudFoundryOpen,
  title = {Cloud {{Foundry}} - {{Open Source Cloud Application Platform}}},
  abstract = {Open Source Cloud Application Platform Backed by Cisco, Google, IBM, Microsoft, Pivotal, SAP, SUSE and more Cloud Foundry makes it faster and easier to build, test, deploy and scale applications, providing a choice of clouds, developer frameworks, and application services. It is an open source project and is available through a variety of private cloud \ldots{} Continue reading "Home"},
  language = {en-US},
  howpublished = {\url{https://www.cloudfoundry.org/}},
  file = {/home/sll/Zotero/storage/942BBVMJ/www.cloudfoundry.org.html}
}

@article{burnsBorgOmegaKubernetes2016,
  title = {Borg, {{Omega}}, and {{Kubernetes}}},
  volume = {59},
  issn = {0001-0782},
  doi = {10.1145/2890784},
  abstract = {Lessons learned from three container-management systems over a decade.},
  number = {5},
  journal = {Commun. ACM},
  note = {\url{http://doi.acm.org/10.1145/2890784}},
  author = {Burns, Brendan and Grant, Brian and Oppenheimer, David and Brewer, Eric and Wilkes, John},
  month = apr,
  year = {2016},
  pages = {50--57},
  file = {/home/sll/Zotero/storage/92JN7XJJ/Burns et al. - 2016 - Borg, Omega, and Kubernetes.pdf}
}

@incollection{vanderaalstOrchestration2009,
  address = {Boston, MA},
  title = {Orchestration},
  isbn = {978-0-387-39940-9},
  language = {en},
  booktitle = {Encyclopedia of {{Database Systems}}},
  publisher = {{Springer US}},
  note = {\url{https://doi.org/10.1007/978-0-387-39940-9_1197}},
  author = {{van der Aalst}, W. M. P.},
  editor = {LIU, LING and \"OZSU, M. TAMER},
  year = {2009},
  pages = {2004-2005},
  file = {/home/sll/Zotero/storage/E8XULUN5/van der Aalst - 2009 - Orchestration.pdf},
  doi = {10.1007/978-0-387-39940-9_1197}
}

@book{erlServiceOrientedArchitectureConcepts2005,
  title = {Service-{{Oriented Architecture}}: {{Concepts}}, {{Technology}}, and {{Design}}},
  isbn = {978-0-13-185858-9},
  shorttitle = {Service-{{Oriented Architecture}}},
  abstract = {"Service Oriented Architecture is a hot, but often misunderstood topic in IT today. Thomas articulately describes the concepts, specifications, and standards behind service orientation and Web Services. For enterprises adopting SOA, there is detailed advice for service-oriented analysis, planning, and design. This book is a must read!"\textemdash{}Alex Lynch, Principal Consultant, Microsoft Enterprise Services"One primary objective of applying SOA in design is to provide business value to the solutions we build. Understanding the right approach to analyzing, designing, and developing service-oriented solutions is critical. Thomas has done a great job of demystifying SOA in practical terms with his book."\textemdash{}Rick Weaver, IBM Senior Consulting Certified SW I/T Specialist"A pragmatic guide to SOA principles, strategy, and best practices that distills the hype into a general framework for approaching SOA adoption in complex enterprise environments."\textemdash{}Sameer Tyagi, Senior Staff Engineer, Sun Microsystems"A very timely and much needed contribution to a rapidly emerging field. Through clarifying the principles and nuances of this space, the author provides a comprehensive treatment of critical key aspects of SOA from analysis and planning to standards ranging from WS-specifications to BPEL. I'll be recommending this book to both clients and peers who are planning on embracing SOA principles."\textemdash{}Ravi Palepu, Senior Field Architect, Rogue Wave Software"Finally, an SOA book based on real implementation experience in production environments. Too many SOA books get lost in the technical details of Web Services standards, or simply repeat vendor hype. This book covers the really hard parts: the complex process of planning, designing and implementing service-oriented architectures that meet organizational goals. It is an essential companion to any software developer, architect, or project manager implementing\textemdash{}or thinking about implementing\textemdash{}a service-oriented architecture."\textemdash{}Priscilla Walmsley, Managing Director of Datypic"Thomas Erl's Service-Oriented Architecture: Concepts, Technology, and Design is as good an introduction to service-oriented architectures as one could wish for. In a single volume, it covers the entire topic, from theory to real-world use to technical details. The examples are superb and the writing is wonderfully clear."\textemdash{}Ronald Bourret, Author, "XML and Databases""Finally an SOA book which gets to the point with real world answers and examples. Erl guides you on a real world SOA journey. From architecture design to industry standards, this book is well written and can be easily referenced for everyday use. When embarking on your own service orientated adventures, this is the book you want in your bag."\textemdash{}Clark Sell, Vice President, CSell Incorporated"Organizations struggling to evolve existing service-oriented solutions beyond simple Web Services now have an expert resource available. Leading the way to the true service-oriented enterprise, Thomas Erl demystifies the complexities of the open WS-I standards with detailed practical discussions and case studies. Erl's depth and clarity makes this work a superb complement to his Field Guide."\textemdash{}Kevin P. Davis, PhD., Software Architect"This book is an excellent guide for architects, developers, and managers who are already working with or are considering developing Web Services or Service-Oriented Architecture solutions. The book is divided into four sections. In the first section the fundamental technologies of XML, Web Services and Service-Oriented Architectures are described in detail with attention given to emerging standards. The book is well written and very thorough in its coverage of the subject. I recommend this book highly to anyone interested in enterprise level service architectures."\textemdash{}Adam Hocek, President and CTO, Broadstrokes, Inc.Additional praise quotes are published at: www.soabooks.com/reviews.aspThe foremost "how-to" guide to SOAService-Oriented Architecture (SOA) is at the heart of a revolutionary computing platform that is being adopted world-wide and has earned the support of every major software provider. In Service-Oriented Architecture: Concepts, Technology, and Design, Thomas Erl presents the first end-to-end tutorial that provides step-by-step instructions for modeling and designing service-oriented solutions from the ground up.Erl uses more than 125 case study examples and over 300 diagrams to illuminate the most important facets of building SOA platforms: goals, obstacles, concepts, technologies, standards, delivery strategies, and processes for analysis and design.His book's broad coverage includesDetailed step-by-step processes for service-oriented analysis and service-oriented designAn in-depth exploration of service-orientation as a distinct design paradigm, including a comparison to object-orientationA comprehensive study of SOA support in .NET and J2EE development and runtime platformsDescriptions of over a dozen key Web services technologies and WS-* specifications, including explanations of how they interrelate and how they are positioned within SOAThe use of "In Plain English" sections, which describe complex concepts through non-technical analogiesGuidelines for service-oriented business modeling and the creation of specialized service abstraction layersA study contrasting past architectures with SOA and reviewing current industry influencesProject planning and the comparison of different SOA delivery strategiesThe goal of this book is to help you attain a solid understanding of what constitutes contemporary SOA along with step-by-step guidance for realizing its successful implementation.About the Web SitesErl's Service-Oriented Architecture books are supported by two Web sites. http://www.soabooks.com provides a variety of content resources and http://www.soaspecs.com supplies a descriptive portal to referenced specifications. \textcopyright{} Copyright Pearson Education. All rights reserved.},
  language = {en},
  publisher = {{Prentice Hall}},
  note = {\url{https://proquest.tech.safaribooksonline.de/0131858580}},
  author = {Erl, Thomas},
  month = aug,
  year = {2005}
}

@misc{HyperMakeVM,
  title = {Hyper - {{Make VM}} Run like {{Container}}},
  howpublished = {\url{https://www.hypercontainer.io/}},
  file = {/home/sll/Zotero/storage/3LEFSBCH/www.hypercontainer.io.html}
}

@misc{IntelClearContainers,
  title = {Intel {{Clear Containers}}},
  copyright = {Apache-2.0},
  shorttitle = {{{OCI}} ({{Open Containers Initiative}}) Compatible Runtime Using {{Virtual Machines}}},
  journal = {GitHub},
  howpublished = {\url{https://github.com/clearcontainers/runtime}}
}

@misc{ApacheMesosContainerizer,
  title = {Apache {{Mesos Containerizer}}},
  abstract = {Apache Mesos abstracts resources away from machines,
                   enabling fault-tolerant and elastic distributed systems
                   to easily be built and run effectively.},
  howpublished = {\url{http://mesos.apache.org/documentation/latest/mesos-containerizer/}},
  file = {/home/sll/Zotero/storage/7A72KJN5/mesos-containerizer.html}
}

@misc{ApacheMesos,
  title = {Apache {{Mesos}}},
  abstract = {Apache Mesos abstracts resources away from machines,
                   enabling fault-tolerant and elastic distributed systems
                   to easily be built and run effectively.},
  howpublished = {\url{http://mesos.apache.org/}},
  file = {/home/sll/Zotero/storage/GHCVRNW9/mesos.apache.org.html}
}

@misc{KataContainersSpeed,
  title = {Kata {{Containers}} - the {{Speed}} of {{Containers}}, the {{Security}} of {{VMs}}},
  howpublished = {\url{https://katacontainers.io/}},
  file = {/home/sll/Zotero/storage/UCF2YR2W/katacontainers.io.html}
}

@misc{Singularity,
  title = {Singularity},
  abstract = {Simple with all components packaged in a single file, including the definitions, configurations, metadata, and security keys.},
  language = {en-US},
  journal = {Sylabs.io},
  howpublished = {\url{https://www.sylabs.io/singularity/}},
  file = {/home/sll/Zotero/storage/IQQJMX6K/singularity.html}
}

@article{IntelHyperSh2017,
  title = {Intel, {{Hyper}}.Sh {{Merge Tech}} into {{Kata Containers}}},
  language = {English},
  journal = {ICT Monitor Worldwide},
  note = {\url{https://search.proquest.com/docview/1972919395?accountid=39579}},
  month = dec,
  year = {2017},
  keywords = {Technology: Comprehensive Works},
  annote = {Copyright - \textcopyright{} 2017 Global Data Point. All Rights Reserved. Provided by SyndiGate Media Inc. (Syndigate.info); Last updated - 2017-12-06}
}

@article{OpenstackBoostsContainer2018,
  title = {Openstack {{Boosts Container Security}} with {{Kata Containers}} 1.0},
  language = {English},
  journal = {ICT Monitor Worldwide},
  note = {\url{https://search.proquest.com/docview/2042710549?accountid=39579}},
  month = may,
  year = {2018},
  keywords = {Technology: Comprehensive Works,Workloads},
  annote = {Name - OpenStack Foundation; Microsoft Corp; Copyright - \textcopyright{} 2018 Global Data Point. All Rights Reserved. Provided by SyndiGate Media Inc. (Syndigate.info); Last updated - 2018-05-23}
}

@misc{NablaContainersNew,
  title = {Nabla {{Containers}} - {{A New Approach}} to {{Container Isolation}}},
  shorttitle = {Nabla Containers},
  abstract = {A new approach to Container Isolation},
  language = {en-us},
  howpublished = {\url{https://nabla-containers.github.io/}},
  file = {/home/sll/Zotero/storage/ER59KCD5/nabla-containers.github.io.html}
}

@article{IBMAttemptsGraft2018,
  title = {{{IBM}} Attempts to Graft {{VM}} Security onto Container Flexibility},
  language = {English},
  journal = {ICT Monitor Worldwide},
  note = {\url{https://search.proquest.com/docview/2071072303?accountid=39579}},
  month = jul,
  year = {2018},
  keywords = {Linux,Technology: Comprehensive Works,Engineers},
  annote = {Name - IBM Research; Google Inc; Copyright - \textcopyright{} 2018 Global Data Point. All Rights Reserved. Provided by SyndiGate Media Inc. (Syndigate.info); Last updated - 2018-09-21}
}

@misc{GVisorContainerRuntime,
  title = {{{gVisor}} - {{Container Runtime Sandbox}}.},
  copyright = {Apache-2.0},
  journal = {GitHub},
  howpublished = {\url{https://github.com/google/gvisor}}
}

@book{casalicchioMeasuringDockerPerformance2017a,
  title = {Measuring {{Docker Performance}}: {{What}} a {{Mess}}{$\Exclam$}!},
  isbn = {978-1-4503-4899-7},
  abstract = {Today, a new technology is going to change the way platforms for the internet of services are designed and managed. This technology is called container (e.g. Docker and LXC). The internet of service industry is adopting the container technology both for internal usage and as commercial offering. The use of container as base technology for large-scale systems opens many challenges in the area of resource management at run-time, for example: autoscaling, optimal deployment and monitoring. Specifically, monitoring of container based systems is at the ground of any resource management solution, and it is the focus of this work. This paper explores the tools available to measure the performance of Docker from the perspective of the host operating system and of the virtualization environment, and it provides a characterization of the CPU and disk I/O overhead introduced by containers.},
  author = {Casalicchio, Emiliano and Perciballi, Vanessa},
  year = {2017},
  keywords = {Container,Cloud Computing,Computer Systems,Datorsystem,Docker,Electrical Engineering,Electronic Engineering,Elektroteknik Och Elektronik,Engineering And Technology,Information Engineering,Internet Of Service,Microservices,Monitoring,Performance Evaluation,Teknik Och Teknologier}
}

@article{tommasoImpactDockerContainers2015,
  title = {The {{Impact}} of {{Docker Containers}} on the {{Performance}} of {{Genomic Pipelines}}},
  volume = {3},
  abstract = {{$<$}p{$>$}Genomic pipelines consist of several pieces of third party software and, because of their experimental nature, frequent changes and updates are commonly necessary thus raising serious deployment and reproducibility issues. Docker containers are emerging as a possible solution for many of these problems, as they allow the packaging of pipelines in an isolated and self-contained manner. This makes it easy to distribute and execute pipelines in a portable manner across a wide range of computing platforms. Thus, the question that arises is to what extent the use of Docker containers might affect the performance of these pipelines. Here we address this question and conclude that Docker containers have only a minor impact on the performance of common genomic pipelines, which is negligible when the executed jobs are long in terms of computational time.{$<$}/p{$>$}},
  journal = {PeerJ},
  author = {Tommaso, Paolo Di and Palumbo, Emilio and Chatzou, Maria and Prieto, Pablo and Heuer, Michael L. and Notredame, Cedric},
  month = sep,
  year = {2015},
  keywords = {Docker,Bioinformatics,Medicine,Pipelines,Virtualisation,Workflow},
  pages = {p.e1273}
}

@misc{OciInterfacingContainerRuntime,
  title = {Oci-{{Interfacing Container Runtime}} for {{Nabla Containers}}: {{Nabla}}-{{Containers}}/{{Runnc}}},
  copyright = {ISC},
  shorttitle = {{{OCI}}-Interfacing {{Container}} Runtime for {{Nabla Containers}}},
  journal = {GitHub},
  howpublished = {\url{https://github.com/nabla-containers/runnc}}
}

@inproceedings{xie2017performance,
  title = {The {{Performance Analysis}} of {{Docker}} and Rkt Based on {{Kubernetes}}},
  booktitle = {2017 13th {{International Conference}} on {{Natural Computation}}, {{Fuzzy Systems}} and {{Knowledge Discovery}} ({{ICNC}}-{{FSKD}})},
  author = {Xie, Xiao-Lan and Wang, Peng and Wang, Qi},
  year = {2017},
  keywords = {Containers,Linux,virtual machines,virtualisation,Virtualization,Docker,Virtual machining,cloud computing,Cloud computing,Kernel,performance analysis,virtual machine,Container cloud,Rkt,cloud computing platform,container virtualization technologies,docker,Kubernetes,Linux system,rkt,system resources},
  pages = {2137-2141},
  file = {/home/sll/Zotero/storage/7DIAY9EZ/Xie et al. - 2017 - The performance analysis of Docker and rkt based o.pdf;/home/sll/Zotero/storage/GGKJD6WY/8393101.html},
  organization = {{IEEE}}
}

@article{yadavPerformanceComparisonVirtual2018,
  title = {Performance {{Comparison Between Virtual Machines}} and {{Docker Containers}}},
  volume = {16},
  issn = {1548-0992},
  doi = {10.1109/TLA.2018.8528247},
  abstract = {Containers emerged as a new alternative to the virtual machines in large enterprise systems due to their virtualization mechanism that demands a low utilization level of the computational resources. Performance evaluation of Containers and virtual machines provides to practitioners and system administrators information about the quality of the services provisioned for virtualization. The main goal of this paper is to conduct a comparative study of the performance evaluation of virtual machines and containers. In order to accomplish this, a methodology is proposed to evaluate the performance of Docker containers and virtual machines. Additionally, a real-world case study is presented to illustrate the applicability of the proposed approach. For all the experiments, the Docker container shown lower execution times for the requests against virtual machine.},
  number = {8},
  journal = {IEEE Latin America Transactions (IEEE LATAM)},
  author = {Yadav, R. R. and Sousa, E. T. G. and Callou, G. R. A.},
  month = aug,
  year = {2018},
  keywords = {Benchmark testing,Containers,Virtual machine monitors,IEEE transactions,Performance evaluation,Random access memory,Virtual Machines,Virtual machining},
  pages = {2282-2288},
  file = {/home/sll/Zotero/storage/SYJG7A96/Yadav et al. - 2018 - Performance Comparison Between Virtual Machines an.pdf;/home/sll/Zotero/storage/JU36E8J5/8528247.html;/home/sll/Zotero/storage/PKUAQTJL/8528247.html}
}

@inproceedings{mavridisPerformanceOverheadStudy2017,
  title = {Performance and {{Overhead Study}} of {{Containers Running}} on {{Top}} of {{Virtual Machines}}},
  volume = {02},
  doi = {10.1109/CBI.2017.69},
  abstract = {Cloud computing is a widespread and commonly used computing paradigm. Cloud relied on virtualization technology to be a scalable and efficient distributed system. In traditional cloud infrastructures, hypervisors like KVM create and manage Virtual Machines according to users' demands. Recently a more lightweight virtualization technique is being rapidly adopted and it is based on containers. Although running a container on top of Virtual Machine is a common case, according to our research it has never been studied before how this affects the container's performance. In this work, we conducted several experiments to study how the container performance is affected by the additional virtualization layer of the Virtual Machine. We used Docker to deploy and run our containers, KVM hypervisor for the Virtual Machines and we executed a series of well-known benchmarks on different operating systems.},
  booktitle = {2017 {{IEEE}} 19th {{Conference}} on {{Business Informatics}} ({{CBI}})},
  author = {Mavridis, I. and Karatza, H.},
  month = jul,
  year = {2017},
  keywords = {Benchmark testing,Containers,operating systems,operating systems (computers),Virtual machine monitors,virtual machines,virtualisation,Virtualization,Docker,Virtual Machines,Virtual machining,cloud computing,Cloud computing,cloud infrastructures,container overhead study,container performance,distributed system,IOZONE,KVM,KVM hypervisor,LINPACK,NETPERF,performance,Servers,STREAM,virtualization layer,virtualization technology,VM},
  pages = {32-38},
  file = {/home/sll/Zotero/storage/WSMYMQ45/Mavridis and Karatza - 2017 - Performance and Overhead Study of Containers Runni.pdf;/home/sll/Zotero/storage/95MF5UHM/8012937.html;/home/sll/Zotero/storage/UQWD6EGL/8012937.html}
}

@inproceedings{rahoKVMXenDocker2015,
  title = {{{KVM}}, {{Xen}} and {{Docker}}: {{A}} Performance Analysis for {{ARM}} Based {{NFV}} and Cloud Computing},
  shorttitle = {{{KVM}}, {{Xen}} and {{Docker}}},
  doi = {10.1109/AIEEE.2015.7367280},
  abstract = {Virtualization is a mature technology which has shown to provide computing resource and cost optimization while enabling consolidation, isolation and hardware abstraction through the concept of virtual machine. Recently, by sharing the operating system resources and simplifying the deployment of applications, containers are getting a more and more popular alternative to virtualization for specific use cases. As a result, today these two technologies are competing to provide virtual instances for cloud computing, Network Functions Virtualization (NFV), High Performance Computing (HPC), avionic and automotive platforms. In this paper, the performance of the most important open source hypervisor (KVM and Xen) and container (Docker) solutions are compared on the ARM architecture, which is rapidly emerging in the server world. The extensive system and Input/Output (I/O) performance measurements included in this paper show a slightly better performance for containers in CPU bound workloads and request/response networking; conversely, thanks to their caching mechanisms, hypervisors perform better in most disk I/O operations and TCP streaming benchmark.},
  booktitle = {2015 {{IEEE}} 3rd {{Workshop}} on {{Advances}} in {{Information}}, {{Electronic}} and {{Electrical Engineering}} ({{AIEEE}})},
  author = {Raho, M. and Spyridakis, A. and Paolino, M. and Raho, D.},
  month = nov,
  year = {2015},
  keywords = {Containers,Linux,Virtual machine monitors,virtual machines,virtualisation,Virtualization,Docker,cloud computing,KVM,application deployment,ARM based NFV,caching mechanisms,Computer architecture,computer network performance evaluation,computing resource,consolidation,cost optimization,CPU bound workloads,disk I/O operations,Hardware,hardware abstraction,I/O performance measurements,input/output performance measurements,isolation,Kernel,network function virtualization,open source hypervisor,operating system resource sharing,performance analysis,public domain software,request/response networking,TCP streaming benchmark,transport protocols,virtual instances,virtual machine,virtualization,Xen},
  pages = {1-8},
  file = {/home/sll/Zotero/storage/FW399XUU/Raho et al. - 2015 - KVM, Xen and Docker A performance analysis for AR.pdf;/home/sll/Zotero/storage/357Z9CXN/7367280.html;/home/sll/Zotero/storage/VDMKZMTQ/7367280.html}
}

@inproceedings{xiePerformanceComparisonNative2018,
  title = {The {{Performance Comparison}} of {{Native}} and {{Containers}} for the {{Cloud}}},
  doi = {10.1109/ICSGEA.2018.00100},
  abstract = {With the rapid development of cloud computing, virtualization technology as a key technology in cloud computing is also constantly evolving. Virtualization technology has faced a major challenges in the contradiction between application-to-application independence and resource interoperability. As a kind of virtual technology based on operating system, the container perfectly solved the problem of program independence and resource sharing. This paper introduces the current two container technologies: Docker and Rkt. It firstly overviews the traditional virtual machine and container technology and finally tests the CUP and I/O performance of two containers through the special tools.},
  booktitle = {2018 {{International Conference}} on {{Smart Grid}} and {{Electrical Automation}} ({{ICSGEA}})},
  author = {Xie, X. and Wang, P. and Wang, Q.},
  month = jun,
  year = {2018},
  keywords = {Linux,virtual machines,virtualisation,Docker,cloud computing,Cloud computing,virtualization technology,application-to-application independence,Automation,Conferences,container,Container cloud,CUP,IO performance,key technology,open systems,performance comparison,resource interoperability,Rkt,Smart grids,traditional virtual machine},
  pages = {378-381},
  file = {/home/sll/Zotero/storage/3ZVGRE6D/Xie et al. - 2018 - The Performance Comparison of Native and Container.pdf;/home/sll/Zotero/storage/3RQNQY84/8498359.html}
}

@inproceedings{xavierPerformanceComparisonContainerBased2014,
  title = {A {{Performance Comparison}} of {{Container}}-{{Based Virtualization Systems}} for {{Mapreduce Clusters}}},
  booktitle = {Parallel, {{Distributed}} and {{Network}}-{{Based Processing}} ({{PDP}})},
  publisher = {{IEEE}},
  author = {Xavier, Miguel Gomes and Neves, Marcelo Veiga and De Rose, Cesar Augusto Fonticielha},
  year = {2014},
  keywords = {Benchmark testing,Containers,Linux,virtualisation,Virtualization,Kernel,Container-based virtualization,container-based virtualization systems,High performance computing,hypervisor-based virtualization systems,Linux containers,Linux VServer,MapReduce,MapReduce clusters,MR applications,OpenVZ,parallel processing,performance isolation,resource sharing,Scalability,Throughput},
  pages = {299--306},
  file = {/home/sll/Zotero/storage/QRS8GSRX/Xavier et al. - 2014 - A Performance Comparison of Container-Based Virtua.pdf;/home/sll/Zotero/storage/6KSI49RB/6787290.html;/home/sll/Zotero/storage/LA3YYG2N/6787290.html}
}

@inproceedings{aguileraManagedContainersFramework2018,
  title = {Managed {{Containers}}: {{A Framework}} for {{Resilient Containerized Mission Critical Systems}}},
  shorttitle = {Managed {{Containers}}},
  doi = {10.1109/CLOUD.2018.00142},
  abstract = {Traditional defense mechanisms are insufficient for protecting containerized mission critical systems. These systems are mostly based on cloud-based images (e.g., Docker) that need to be always-on-always-connected. High availability and data integrity become crucial to deliver their mission. Unable to guarantee uncompromisable security and given that systems will inevitably be attacked, we must change our goals to emphasize resiliency and mission survivability. This paper presents work-in-progress to create a framework for cloud-based container resiliency. Our resilient framework makes use of Linux containers to provide resiliency to services. It is designed to orchestrate and manage the container lifecycle while enforcing security and returning a service to a previous secure state in case of a cyber-attack. It achieves this by expanding upon the generic container model with additional layers that enhance security and increase auditability. We coin the term "managed containers" to refer to the enhanced containers managed by our resilient framework. In case of an anomaly, it generates a report and allows the operator to choose a resiliency strategy. In our tests, our framework is able to securely recover from a fault in less time than a pure Docker solution while protecting against the most common container vulnerabilities.},
  booktitle = {2018 {{IEEE}} 11th {{International Conference}} on {{Cloud Computing}} ({{CLOUD}})},
  author = {Aguilera, X. Merino and Otero, C. and Ridley, M. and Elliott, D.},
  month = jul,
  year = {2018},
  keywords = {Containers,Linux,Virtual machining,cloud computing,Cloud computing,virtualization,Linux containers,auditing,availability,cloud-based container resiliency,cloud-based images,common container vulnerabilities,container lifecycle,cyber survivability,cyber-attack,data integrity,enhanced containers,generic container model,managed containers,Mission critical systems,mission survivability,moving target defense,Resilience,resiliency strategy,resilient containerized mission critical systems,resilient framework,safety-critical software,secure state,Security,security of data,traditional defense mechanisms,uncompromisable security},
  pages = {946-949},
  file = {/home/sll/Zotero/storage/G9FSH2E5/Aguilera et al. - 2018 - Managed Containers A Framework for Resilient Cont.pdf;/home/sll/Zotero/storage/D9PXSIEC/8457910.html}
}

@inproceedings{manuDockerContainerSecurity2016,
  address = {Nagercoil, India},
  title = {Docker Container Security via Heuristics-Based Multilateral Security-Conceptual and Pragmatic Study},
  isbn = {978-1-5090-1277-0},
  doi = {10.1109/ICCPCT.2016.7530217},
  booktitle = {2016 {{International Conference}} on {{Circuit}}, {{Power}} and {{Computing Technologies}} ({{ICCPCT}})},
  publisher = {{IEEE}},
  note = {\url{http://ieeexplore.ieee.org/document/7530217/}},
  author = {Manu, A R and Patel, Jitendra Kumar and Akhtar, Shakil and Agrawal, V K and Murthy, K N Bala Subramanya},
  month = mar,
  year = {2016},
  pages = {1-14}
}

@inproceedings{reshetovaSecurityOSlevelVirtualization2014,
  title = {Security of {{OS}}-Level Virtualization Technologies},
  booktitle = {Nordic {{Conference}} on {{Secure IT Systems}} ({{NordSec}})},
  publisher = {{Springer}},
  author = {Reshetova, Elena and Karhunen, Janne and Nyman, Thomas and Asokan, N.},
  year = {2014},
  pages = {77--93},
  file = {/home/sll/Zotero/storage/988VEEXF/Reshetova et al. - 2014 - Security of OS-level virtualization technologies.pdf;/home/sll/Zotero/storage/FC4ZGLV3/978-3-319-11599-3_5.html}
}

@article{buiAnalysisDockerSecurity2015,
  title = {Analysis of Docker Security},
  journal = {arXiv preprint arXiv:1501.02967},
  author = {Bui, Thanh},
  year = {2015},
  file = {/home/sll/Zotero/storage/7WS9XU3G/Bui - 2015 - Analysis of docker security.pdf;/home/sll/Zotero/storage/HIEHGIHA/1501.html}
}

@inproceedings{linMeasurementStudyLinux2018,
  address = {New York, NY, USA},
  series = {{{ACSAC}} '18},
  title = {A {{Measurement Study}} on {{Linux Container Security}}: {{Attacks}} and {{Countermeasures}}},
  isbn = {978-1-4503-6569-7},
  shorttitle = {A {{Measurement Study}} on {{Linux Container Security}}},
  doi = {10.1145/3274694.3274720},
  abstract = {Linux container mechanism has attracted a lot of attention and is increasingly utilized to deploy industry applications. Though it is a consensus that the container mechanism is not secure due to the kernel-sharing property, it lacks a concrete and systematical evaluation on its security using real world exploits. In this paper, we collect an attack dataset including 223 exploits that are effective on the container platform, and classify them into different categories using a two-dimensional attack taxonomy. Then we evaluate the security of existing Linux container mechanism using 88 typical exploits filtered out from the dataset. We find 50 (56.82\%) exploits can successfully launch attacks from inside the container with the default configuration. Since the privilege escalation exploits can completely disable the container protection mechanism, we conduct an in-depth analysis on these exploits. We find the kernel security mechanisms such as Capability, Seccomp, and MAC play a more important role in preventing privilege escalation than the container isolation mechanisms (i.e., Namespace and Cgroup). However, the interdependence and mutual-influence relationship among these kernel security mechanisms may make them fall into the "short board effect" and impair their protection capability. By studying the 11 exploits that still can successfully break the isolation provided by container and achieve privilege escalation, we identify a common 4-step attack model followed by all 11 exploits. Finally, we propose a defense mechanism to effectively defeat those identified privilege escalation attacks.},
  booktitle = {Annual {{Computer Security Applications Conference}}},
  publisher = {{ACM}},
  note = {\url{http://doi.acm.org/10.1145/3274694.3274720}},
  author = {Lin, Xin and Lei, Lingguang and Wang, Yuewu and Jing, Jiwu and Sun, Kun and Zhou, Quan},
  year = {2018},
  keywords = {Container,Kernel Security Mechanisms,Privilege Escalation},
  pages = {418--429}
}

@misc{NamespacesArticleIndex,
  title = {Namespaces {{Article Index}}},
  journal = {LWN.net},
  howpublished = {\url{https://lwn.net/Articles/766124/}},
  file = {/home/sll/Zotero/storage/K2FSVLW9/766124.html}
}

@misc{Crio,
  title = {{{CRI}}-{{O}}},
  howpublished = {\url{https://cri-o.io/}},
  file = {/home/sll/Zotero/storage/VTR34959/cri-o.io.html}
}

@misc{OpenContainersInitiative,
  title = {Open {{Containers Initiative}}},
  howpublished = {\url{https://www.opencontainers.org/}},
  file = {/home/sll/Zotero/storage/YEQ97H76/www.opencontainers.org.html}
}

@misc{CloudNativeComputing,
  title = {Cloud {{Native Computing Foundation}}},
  language = {en-US},
  howpublished = {\url{https://www.cncf.io/}},
  file = {/home/sll/Zotero/storage/KU9YGBEB/www.cncf.io.html}
}

@misc{OCIImageFormat,
  title = {{{OCI Image Format}}},
  copyright = {Apache-2.0},
  journal = {GitHub},
  howpublished = {\url{https://github.com/opencontainers/image-spec}}
}

@misc{OCIRuntimeSpecification,
  title = {{{OCI Runtime Specification}}},
  copyright = {Apache-2.0},
  journal = {GitHub},
  howpublished = {\url{https://github.com/opencontainers/runtime-spec}}
}

@misc{ContainerNetworkInterface,
  title = {Container {{Network Interface}}: {{Networking}} for {{Linux Containers}}},
  copyright = {Apache-2.0},
  shorttitle = {Container {{Network Interface}}},
  journal = {GitHub},
  howpublished = {\url{https://github.com/containernetworking/cni}}
}

@misc{DemystifyingContainerRuntimes,
  title = {Demystifying {{Container Runtimes}}},
  journal = {LWN.net},
  howpublished = {\url{https://lwn.net/Articles/741897/}},
  file = {/home/sll/Zotero/storage/DM2MCIYW/741897.html}
}

@misc{KubeConCloudNativeConNorth,
  title = {{{KubeCon}} + {{CloudNativeCon North America}} 2017: {{CRI}}-{{O}}: {{All}} the {{Runtime Kubernetes Needs}},...},
  shorttitle = {{{KubeCon}} + {{CloudNativeCon North America}} 2017},
  abstract = {View more about this event at KubeCon + CloudNativeCon North America 2017},
  howpublished = {\url{https://kccncna17.sched.com/event/CU6T/cri-o-all-the-runtime-kubernetes-needs-and-nothing-more-mrunal-patel-red-hat}},
  file = {/home/sll/Zotero/storage/48H7WJSU/cri-o-all-the-runtime-kubernetes-needs-and-nothing-more-mrunal-patel-red-hat.html}
}

@misc{FraktiHypervisorbasedContainer,
  title = {Frakti - {{The Hypervisor}}-Based {{Container Runtime}} for {{Kubernetes}}},
  copyright = {Apache-2.0},
  shorttitle = {The Hypervisor-Based Container Runtime for {{Kubernetes}}.},
  journal = {GitHub},
  howpublished = {\url{https://github.com/kubernetes/frakti}}
}

@misc{FirecrackercontainerdEnablesContainerd,
  title = {Firecracker-Containerd {{Enables}} Containerd to {{Manage Containers}} as {{Firecracker Microvms}}},
  copyright = {Apache-2.0},
  shorttitle = {Firecracker-Containerd Enables Containerd to Manage Containers as {{Firecracker microVMs}}},
  journal = {GitHub},
  howpublished = {\url{https://github.com/firecracker-microvm/firecracker-containerd}}
}

@misc{KataContainersDocumentation,
  title = {Kata {{Containers Documentation}} | {{Initial Release}} of {{Kata Containers}} with {{Firecracker Support}}},
  journal = {GitHub},
  howpublished = {\url{https://github.com/kata-containers/documentation/wiki/Initial-release-of-Kata-Containers-with-Firecracker-support}}
}

@misc{FirecrackerMicroVM,
  title = {Firecracker {{MicroVM}}},
  howpublished = {\url{https://firecracker-microvm.github.io/}},
  file = {/home/sll/Zotero/storage/6MCEKG9S/firecracker-microvm.github.io.html}
}

@misc{KataContainersWhy,
  title = {Kata {{Containers}} - {{Why Kata Containers Doesn}}'t {{Replace Kubernetes}}},
  howpublished = {\url{https://katacontainers.io/posts/why-kata-containers-doesnt-replace-kubernetes/}},
  file = {/home/sll/Zotero/storage/CPMHFACV/why-kata-containers-doesnt-replace-kubernetes.html}
}

@misc{MeasuringContainerSecurity,
  title = {Measuring {{Container Security}}},
  journal = {LWN.net},
  howpublished = {\url{https://lwn.net/Articles/773976/}},
  file = {/home/sll/Zotero/storage/J5HEHBZC/773976.html}
}

@misc{UnderstandingNewControl,
  title = {Understanding the {{New Control Groups Api}}},
  journal = {LWN.net},
  howpublished = {\url{https://lwn.net/Articles/679786/}},
  file = {/home/sll/Zotero/storage/T69CBX8V/679786.html}
}

@misc{ContainersUserSpace,
  title = {Containers from {{User Space}}},
  journal = {LWN.net},
  howpublished = {\url{https://lwn.net/Articles/745820/}},
  file = {/home/sll/Zotero/storage/UVF9X5SW/745820.html}
}

@misc{OpenSourceContainerbased,
  title = {{{OpenVZ}} - {{Open Source Container}}-Based {{Virtualization}} for {{Linux}}.},
  abstract = {Multiple secure, isolated Linux containers (otherwise known as VEs or VPSs) on a single physical server enabling better server utilization and ensuring that applications do not conflict.},
  language = {en},
  howpublished = {\url{https://openvz.org/}},
  file = {/home/sll/Zotero/storage/SWLR5SSH/openvz.org.html}
}

@misc{LinuxContainersLXD,
  title = {Linux {{Containers}} - {{LXD}} - {{Introduction}}},
  howpublished = {\url{https://linuxcontainers.org/lxd/}},
  file = {/home/sll/Zotero/storage/5G8QL9GT/lxd.html}
}

@misc{LinuxContainersLXC,
  title = {Linux {{Containers}} - {{LXC}} - {{Introduction}}},
  howpublished = {\url{https://linuxcontainers.org/lxc/introduction/}},
  file = {/home/sll/Zotero/storage/ZDS76UMN/introduction.html}
}

@misc{HyperconvergedInfrastructureSoftware,
  title = {Hyperconverged {{Infrastructure Software Provider}}},
  abstract = {Virtuozzo provides hyperconverged infrastructure software that enables integrated container, hypervisor and software-defined storage solutions \& services.},
  language = {en},
  howpublished = {\url{https://www.virtuozzo.com/}},
  file = {/home/sll/Zotero/storage/QG5KFRSE/www.virtuozzo.com.html}
}

@misc{BreakingOutChroot,
  title = {Breaking {{Out}} of a Chroot() {{Padded Cell}}},
  howpublished = {\url{https://web.archive.org/web/20160127150916/http://www.bpfh.net/simes/computing/chroot-break.html}},
  file = {/home/sll/Zotero/storage/ASJYEZ97/chroot-break.html}
}

@misc{GardenCloudFoundry,
  title = {Garden | {{Cloud Foundry}}},
  howpublished = {\url{https://docs.cloudfoundry.org/concepts/architecture/garden.html}},
  file = {/home/sll/Zotero/storage/M8LM597P/garden.html}
}

@misc{CRIU,
  title = {{{CRIU}}},
  howpublished = {\url{https://criu.org/Main_Page}},
  file = {/home/sll/Zotero/storage/J974XZSI/Main_Page.html}
}

@misc{AnotherNewApproach,
  title = {Yet {{Another New Approach}} to Seccomp},
  journal = {LWN.net},
  howpublished = {\url{https://lwn.net/Articles/475043/}},
  file = {/home/sll/Zotero/storage/YP75R2IP/475043.html}
}

@misc{SeccompOverview,
  title = {A Seccomp {{Overview}}},
  journal = {LWN.net},
  howpublished = {\url{https://lwn.net/Articles/656307/}},
  file = {/home/sll/Zotero/storage/FHVYF5YE/656307.html}
}

@misc{Systemdnspawn,
  title = {Systemd-Nspawn},
  journal = {Freedesktop.org},
  howpublished = {\url{https://www.freedesktop.org/software/systemd/man/systemd-nspawn.html}},
  file = {/home/sll/Zotero/storage/PRDS3RS4/systemd-nspawn.html}
}

@misc{DebianPackageManager,
  title = {Debian {{Package Manager}}},
  howpublished = {\url{https://wiki.debian.org/Teams/Dpkg/}},
  file = {/home/sll/Zotero/storage/5299577J/Dpkg.html}
}

@misc{RPMPackageManager,
  title = {{{RPM Package Manager}}},
  howpublished = {\url{https://rpm.org/}},
  file = {/home/sll/Zotero/storage/77H8WJ2C/rpm.org.html}
}

@misc{UpdatesContainerIsolation,
  title = {Updates in {{Container Isolation}}},
  journal = {LWN.net},
  howpublished = {\url{https://lwn.net/Articles/754433/}},
  file = {/home/sll/Zotero/storage/K4U6W2AJ/754433.html}
}

@article{merkelDockerLightweightLinux2014,
  title = {Docker: {{Lightweight Linux Containers}} for {{Consistent Development}} and {{Deployment}}},
  volume = {2014},
  issn = {1075-3583},
  shorttitle = {Docker},
  abstract = {Docker promises the ability to package applications and their dependencies into lightweight containers that move easily between different distros, start up quickly and are isolated from each other.},
  number = {239},
  journal = {Linux Journal},
  note = {\url{http://dl.acm.org/citation.cfm?id=2600239.2600241}},
  author = {Merkel, Dirk},
  month = mar,
  year = {2014}
}

@article{haleContainersPortableProductive2017,
  title = {Containers for {{Portable}}, {{Productive}}, and {{Performant Scientific Computing}}},
  volume = {19},
  issn = {1521-9615},
  doi = {10.1109/MCSE.2017.2421459},
  abstract = {Containers are an emerging technology that holds promise for improving productivity and code portability in scientific computing. The authors examine Linux container technology for the distribution of a nontrivial scientific computing software stack and its execution on a spectrum of platforms from laptop computers through high-performance computing systems. For Python code run on large parallel computers, the runtime is reduced inside a container due to faster library imports. The software distribution approach and data that the authors present will help developers and users decide on whether container technology is appropriate for them. The article also provides guidance for vendors of HPC systems that rely on proprietary libraries for performance on what they can do to make containers work seamlessly and without performance penalty.},
  number = {6},
  journal = {Computing in Science Engineering (CiSE)},
  author = {Hale, J. S. and Li, L. and Richardson, C. N. and Wells, G. N.},
  month = nov,
  year = {2017},
  keywords = {code portability,Containers,high-performance computing systems,HPC systems,laptop computers,Libraries,Linux,Linux container technology,maintainability,nontrivial scientific computing software stack,Object recognition,parallel computers,parallel processing,performance measures,performant scientific computing,portability,portable scientific computing,productive scientific computing,proprietary libraries,Python code run,Runtime,scientific computing,Scientific computing,scientific information systems,Software,software distribution approach,software engineering,software libraries,software portability},
  pages = {40-50},
  file = {/home/sll/Zotero/storage/HSIJ62G4/Hale et al. - 2017 - Containers for Portable, Productive, and Performan.pdf;/home/sll/Zotero/storage/MJK2Z5PA/7933304.html}
}

@inproceedings{casalicchioMeasuringDockerPerformance2017,
  title = {Measuring Docker Performance: {{What}} a Mess!!!},
  booktitle = {International {{Conference}} on {{Performance Engineering Companion}} ({{ACM}}/{{SPEC}})},
  author = {Casalicchio, Emiliano and Perciballi, Vanessa},
  year = {2017},
  pages = {11-16},
  organization = {{ACM}}
}


